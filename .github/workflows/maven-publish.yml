name: 发布包到Maven Central
on:
  release:
    types:
      - created # 当一个新的GitHub Release被创建时触发

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 步骤 2: 设置JDK环境，并同时配置Maven的settings.xml
      - name: Set up JDK, GPG, and Maven settings
        uses: actions/setup-java@v4
        with:
          # 确保这里的Java版本与你pom.xml中定义的版本一致
          java-version: '11'
          distribution: 'temurin'

          # server-id 会被用作 <server><id>ossrh</id></server>
          server-id: ossrh
          # 用户名和密码通过环境变量传递
          # server-username 会读取 MAVEN_USERNAME 这个环境变量的值
          server-username: MAVEN_USERNAME
          # server-password 会读取 MAVEN_PASSWORD 这个环境变量的值
          server-password: MAVEN_PASSWORD

          # 同时，让这个Action也处理GPG密钥的导入，这比用另一个Action更集成
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Publish to Apache Maven Central
        # -P release 用来激活你在pom.xml中定义的release profile
        # -B 批处理模式（非交互式）
        # --no-transfer-progress 让日志更简洁
        # -Dgpg.passphrase=... 将GPG密码安全地传递给gpg插件
        run: mvn -B deploy -P release --no-transfer-progress -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}
        env:
          # 将GitHub Secrets传递给Maven
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
